import telebot
import json
import schedule
import time
import threading
from datetime import datetime, timedelta
import pytz

message = "‚è∞ –ü–æ—Ä–∞ –∑–∞–ø–∏—Å–∞—Ç—å, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
with open('.env', 'r') as f:
    lines = f.readlines()
    BOT_TOKEN = lines[0].strip().split('=')[1]
    USER_ID = lines[1].strip().split('=')[1]
TIMEZONE = pytz.timezone('Europe/Moscow')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "user_messages.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã (–≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏)
def get_date_key():
    now = datetime.now(TIMEZONE)
    return now.strftime("%Y-%m-%d")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
def send_reminder():
    try:
        bot.send_message(USER_ID, message)
        print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {datetime.now(TIMEZONE)}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
def send_daily_report():
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å)
        today = datetime.now(TIMEZONE)
        report_date = (today - timedelta(days=1)).strftime("%Y-%m-%d")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = load_data()
        
        if report_date in data and data[report_date]:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            report_message = f"üìä –û—Ç—á–µ—Ç –∑–∞ {report_date}:\n\n"
            
            for entry in data[report_date]:
                time_str = entry['time']
                message = entry['message']
                report_message += f"‚è∞ {time_str}: {message}\n"
            
            bot.send_message(USER_ID, report_message)
            print(f"–û—Ç—á–µ—Ç –∑–∞ {report_date} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # data.pop(report_date, None)
            # save_data(data)
        else:
            bot.send_message(USER_ID, f"üìä –ó–∞ {report_date} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ")
            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∑–∞ {report_date}")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def setup_schedule():
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    schedule.every().day.at("11:30").do(send_reminder)
    schedule.every().day.at("14:30").do(send_reminder)
    schedule.every().day.at("17:30").do(send_reminder)
    schedule.every().day.at("20:30").do(send_reminder)
    schedule.every().day.at("23:30").do(send_reminder)
    schedule.every().day.at("02:30").do(send_reminder)
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
    schedule.every().day.at("03:00").do(send_daily_report)
    
    print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_scheduler():
    setup_schedule()
    while True:
        schedule.run_pending()
        time.sleep(1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    if str(message.from_user.id) == USER_ID:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = load_data()
        date_key = get_date_key()
        
        if date_key not in data:
            data[date_key] = []
        
        message_data = {
            'time': datetime.now(TIMEZONE).strftime("%H:%:%S"),
            'message': message.text,
            'timestamp': datetime.now(TIMEZONE).isoformat()
        }
        
        data[date_key].append(message_data)
        save_data(data)
        
        bot.reply_to(message, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message.text}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now(TIMEZONE)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
    bot.polling(none_stop=True)

if __name__ == "__main__":
    main()